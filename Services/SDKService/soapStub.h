/* soapStub.h
   Generated by gSOAP 2.8.16 from rcx.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_ns4	"http://schemas.datacontract.org/2004/07/SDKService"
#define SOAP_NAMESPACE_OF_ns5	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20816
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (11)
/* xsd:boolean */
enum xsd__boolean { xsd__boolean__false_ = 0, xsd__boolean__true_ = 1 };
#endif

#ifndef SOAP_TYPE_ns4__DataFormatEnum
#define SOAP_TYPE_ns4__DataFormatEnum (22)
/* ns4:DataFormatEnum */
enum ns4__DataFormatEnum { ns4__DataFormatEnum__XML_ = 0, ns4__DataFormatEnum__JSON = 1 };
#endif

#ifndef SOAP_TYPE_ns4__G8Action
#define SOAP_TYPE_ns4__G8Action (23)
/* ns4:G8Action */
enum ns4__G8Action { ns4__G8Action__WORK = 0, ns4__G8Action__OPEN = 1, ns4__G8Action__UPDATE = 2, ns4__G8Action__REOPEN = 3, ns4__G8Action__BUSY = 4, ns4__G8Action__REJECT = 5 };
#endif

#ifndef SOAP_TYPE_ns4__UpdateCategory
#define SOAP_TYPE_ns4__UpdateCategory (24)
/* ns4:UpdateCategory */
enum ns4__UpdateCategory { ns4__UpdateCategory__CMDB = 0, ns4__UpdateCategory__SERVER_USCOREUSED_USCORESTATUS = 1 };
#endif

#ifndef SOAP_TYPE_ns4__FieldCode
#define SOAP_TYPE_ns4__FieldCode (25)
/* ns4:FieldCode */
enum ns4__FieldCode { ns4__FieldCode__SerialNumber = 0, ns4__FieldCode__ServerName = 1, ns4__FieldCode__PublicIP = 2, ns4__FieldCode__PublicMAC = 3, ns4__FieldCode__PrivateIP = 4, ns4__FieldCode__PrivateMAC = 5, ns4__FieldCode__VirtualIP = 6, ns4__FieldCode__VirtualMAC = 7, ns4__FieldCode__OSVersion = 8, ns4__FieldCode__SoftwareList = 9, ns4__FieldCode__ServerStatus = 10, ns4__FieldCode__ServerKey = 11 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
struct xsd__base64Binary
{
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE__ns1__Call
#define SOAP_TYPE__ns1__Call (26)
/* ns1:Call */
struct _ns1__Call
{
	struct ns4__SDKRequest *request;	/* optional element of type ns4:SDKRequest */
};
#endif

#ifndef SOAP_TYPE__ns1__CallResponse
#define SOAP_TYPE__ns1__CallResponse (29)
/* ns1:CallResponse */
struct _ns1__CallResponse
{
	struct ns4__SDKResponse *CallResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:SDKResponse */
};
#endif

#ifndef SOAP_TYPE_ns4__SDKRequest
#define SOAP_TYPE_ns4__SDKRequest (27)
/* ns4:SDKRequest */
struct ns4__SDKRequest
{
	char *Checksum;	/* optional element of type xsd:string */
	char *ClientId;	/* optional element of type xsd:string */
	enum ns4__DataFormatEnum *DataFormat;	/* optional element of type ns4:DataFormatEnum */
	struct ns4__GetGSOCCURequest *GetHostInfoRequest;	/* optional element of type ns4:GetGSOCCURequest */
	char *Operation;	/* optional element of type xsd:string */
	char *RequestData;	/* optional element of type xsd:string */
	unsigned int *RequestTime;	/* optional element of type xsd:unsignedInt */
	char *Signature;	/* optional element of type xsd:string */
	struct ns4__CMDBV2_USCOREGetServerDetailRequest *theCMDBV2_USCOREGetServerDetailRequest;	/* optional element of type ns4:CMDBV2_GetServerDetailRequest */
	struct ns4__CMDBV2_USCOREHandleServerVMInfoRequest *theCMDBV2_USCOREHandleServerVMInfoRequest;	/* optional element of type ns4:CMDBV2_HandleServerVMInfoRequest */
	struct ns4__CMDBv2_USCORESDKUpdateIpMacRequest *theCMDBV2_USCORESDKUpdateIpMacRequest;	/* optional element of type ns4:CMDBv2_SDKUpdateIpMacRequest */
	struct ns4__GetCCUByProductCodeRequest *theGetCCUByProductCodeRequest;	/* optional element of type ns4:GetCCUByProductCodeRequest */
	struct ns4__GetIRDServerVMInfoRequest *theGetIRDServerVMInfoRequest;	/* optional element of type ns4:GetIRDServerVMInfoRequest */
	struct ns4__GetIRDTechnicalOwnerInfoRequest *theGetIRDTechnicalOwnerInfoRequest;	/* optional element of type ns4:GetIRDTechnicalOwnerInfoRequest */
	struct ns4__GetListAllServerRequest *theGetListAllServerRequest;	/* optional element of type ns4:GetListAllServerRequest */
	struct ns4__GetODAHostInfoListRequest *theGetODAHostInfoListRequest;	/* optional element of type ns4:GetODAHostInfoListRequest */
	struct ns4__GetODAServerInfoListRequest *theGetODAServerInfoListRequest;	/* optional element of type ns4:GetODAServerInfoListRequest */
	struct ns4__GetProductInfoByIPRequest *theGetProductInfoByIPRequest;	/* optional element of type ns4:GetProductInfoByIPRequest */
	struct ns4__GetSDKServerInfoListRequest *theGetSDKServerInfoListRequest;	/* optional element of type ns4:GetSDKServerInfoListRequest */
	struct ns4__GetSO6InfoServerRequest *theGetSO6InfoServerRequest;	/* optional element of type ns4:GetSO6InfoServerRequest */
	struct ns4__GetServerNameBySerialNumberRequest *theGetServerNameBySerialRequest;	/* optional element of type ns4:GetServerNameBySerialNumberRequest */
	struct ns4__GetSnSInfoTechnicalOwnerRequest *theGetSnSInfoTechnicalOwnerRequest;	/* optional element of type ns4:GetSnSInfoTechnicalOwnerRequest */
	struct ns4__HandleServerVMInfoRequest *theHandleServerVMInfoRequest;	/* optional element of type ns4:HandleServerVMInfoRequest */
	struct ns4__GetHostsInfoRequest *theHostInfoRequest;	/* optional element of type ns4:GetHostsInfoRequest */
	struct ns4__InsertDataServerVMRequest *theInsertDataServerVMRequest;	/* optional element of type ns4:InsertDataServerVMRequest */
	struct ns4__InsertMeasuredDataRequest *theInsertMeasuredDataRequest;	/* optional element of type ns4:InsertMeasuredDataRequest */
	struct ns4__GetItemValueListRequest *theItemValueRequest;	/* optional element of type ns4:GetItemValueListRequest */
	struct ns4__GetHostInfoByIPRequest *theMacAddressRequest;	/* optional element of type ns4:GetHostInfoByIPRequest */
	struct ns4__OpenIncidentByCSRequest *theOpenIncidentByCSRequest;	/* optional element of type ns4:OpenIncidentByCSRequest */
	struct ns4__OpenIncidentByDCRequest *theOpenIncidentByDCRequest;	/* optional element of type ns4:OpenIncidentByDCRequest */
	struct ns4__OpenIncidentByG8Request *theOpenIncidentByG8Request;	/* optional element of type ns4:OpenIncidentByG8Request */
	struct ns4__RemoveDataServerVMRequest *theRemoveDataServerVMRequest;	/* optional element of type ns4:RemoveDataServerVMRequest */
	struct ns4__SDKPostRequest *theSDKPostRequest;	/* optional element of type ns4:SDKPostRequest */
	struct ns4__SDKUpdateIpMacRequest *theSDKUpdateIpMacRequest;	/* optional element of type ns4:SDKUpdateIpMacRequest */
	struct ns4__ServerInfo *theServerInfo;	/* optional element of type ns4:ServerInfo */
	struct ns4__HandleServerPhysicalInfoRequest *theUpdateDataServerPhysicalRequest;	/* optional element of type ns4:HandleServerPhysicalInfoRequest */
	struct ns4__UpdateDataServerVMRequest *theUpdateDataServerVMRequest;	/* optional element of type ns4:UpdateDataServerVMRequest */
	struct ns4__UpdateInfoRequest *theUpdateInfoRequest;	/* optional element of type ns4:UpdateInfoRequest */
	struct ns4__UpdateServerStatusRequest *theUpdateServerStatusRequest;	/* optional element of type ns4:UpdateServerStatusRequest */
};
#endif

#ifndef SOAP_TYPE_ns4__GetGSOCCURequest
#define SOAP_TYPE_ns4__GetGSOCCURequest (33)
/* ns4:GetGSOCCURequest */
struct ns4__GetGSOCCURequest
{
	char *RequestDate;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__CMDBV2_USCOREGetServerDetailRequest
#define SOAP_TYPE_ns4__CMDBV2_USCOREGetServerDetailRequest (36)
/* ns4:CMDBV2_GetServerDetailRequest */
struct ns4__CMDBV2_USCOREGetServerDetailRequest
{
	char *NAME;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__CMDBV2_USCOREHandleServerVMInfoRequest
#define SOAP_TYPE_ns4__CMDBV2_USCOREHandleServerVMInfoRequest (38)
/* ns4:CMDBV2_HandleServerVMInfoRequest */
struct ns4__CMDBV2_USCOREHandleServerVMInfoRequest
{
	char *BUCKET;	/* optional element of type xsd:string */
	char *CPU;	/* optional element of type xsd:string */
	char *DELETE;	/* optional element of type xsd:string */
	char *DEPARTMENT;	/* optional element of type xsd:string */
	char *DIVISION;	/* optional element of type xsd:string */
	char *HDD;	/* optional element of type xsd:string */
	char *IPADDRESS;	/* optional element of type xsd:string */
	char *MACADDRESS;	/* optional element of type xsd:string */
	char *MEMORY;	/* optional element of type xsd:string */
	char *NEW_USCOREDEPARTMENT;	/* optional element of type xsd:string */
	char *OS;	/* optional element of type xsd:string */
	char *OS_USCORESERVERNAME;	/* optional element of type xsd:string */
	char *PHYSICALSERVERIP;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORECHASSIS_USCORESN;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORESERVER_USCORESN;	/* optional element of type xsd:string */
	char *PRODUCT;	/* optional element of type xsd:string */
	char *PURPOSE_USCOREUSE;	/* optional element of type xsd:string */
	char *SERVERNAME;	/* optional element of type xsd:string */
	char *STATUS;	/* optional element of type xsd:string */
	char *TECHNICALOWNER;	/* optional element of type xsd:string */
	char *UUID;	/* optional element of type xsd:string */
	char *VLAN;	/* optional element of type xsd:string */
	char *VMCENTER;	/* optional element of type xsd:string */
	char *VMKEY;	/* optional element of type xsd:string */
	char *VMWTOOL;	/* optional element of type xsd:string */
	char *VM_USCOREID;	/* optional element of type xsd:string */
	char *V_USCOREID;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__CMDBv2_USCORESDKUpdateIpMacRequest
#define SOAP_TYPE_ns4__CMDBv2_USCORESDKUpdateIpMacRequest (40)
/* ns4:CMDBv2_SDKUpdateIpMacRequest */
struct ns4__CMDBv2_USCORESDKUpdateIpMacRequest
{
	struct ns4__ArrayOfInterfaceAddress *IP_USCOREPrivate;	/* optional element of type ns4:ArrayOfInterfaceAddress */
	struct ns4__ArrayOfInterfaceAddress *IP_USCOREPublic;	/* optional element of type ns4:ArrayOfInterfaceAddress */
	char *OS_USCOREVersion;	/* optional element of type xsd:string */
	char *Serial_USCORENumber;	/* optional element of type xsd:string */
	char *Server_USCOREName;	/* optional element of type xsd:string */
	char *Zbx_USCORELast_USCOREClock;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfInterfaceAddress
#define SOAP_TYPE_ns4__ArrayOfInterfaceAddress (98)
/* ns4:ArrayOfInterfaceAddress */
struct ns4__ArrayOfInterfaceAddress
{
	int __sizeInterfaceAddress;	/* sequence of elements <InterfaceAddress> */
	struct ns4__InterfaceAddress *InterfaceAddress;	/* optional element of type ns4:InterfaceAddress */
};
#endif

#ifndef SOAP_TYPE_ns4__InterfaceAddress
#define SOAP_TYPE_ns4__InterfaceAddress (100)
/* ns4:InterfaceAddress */
struct ns4__InterfaceAddress
{
	char *IP;	/* optional element of type xsd:string */
	char *MAC;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetCCUByProductCodeRequest
#define SOAP_TYPE_ns4__GetCCUByProductCodeRequest (42)
/* ns4:GetCCUByProductCodeRequest */
struct ns4__GetCCUByProductCodeRequest
{
	unsigned int *EndTime;	/* optional element of type xsd:unsignedInt */
	char *ProductCode;	/* optional element of type xsd:string */
	unsigned int *StartTime;	/* optional element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_ns4__GetIRDServerVMInfoRequest
#define SOAP_TYPE_ns4__GetIRDServerVMInfoRequest (44)
/* ns4:GetIRDServerVMInfoRequest */
struct ns4__GetIRDServerVMInfoRequest
{
	char *VID;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetIRDTechnicalOwnerInfoRequest
#define SOAP_TYPE_ns4__GetIRDTechnicalOwnerInfoRequest (46)
/* ns4:GetIRDTechnicalOwnerInfoRequest */
struct ns4__GetIRDTechnicalOwnerInfoRequest
{
	char *PRODUCT_USCORECODE;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetListAllServerRequest
#define SOAP_TYPE_ns4__GetListAllServerRequest (48)
/* ns4:GetListAllServerRequest */
struct ns4__GetListAllServerRequest
{
	char *Department;	/* optional element of type xsd:string */
	char *Key;	/* optional element of type xsd:string */
	unsigned short *PageNumber;	/* optional element of type xsd:unsignedShort */
	char *Product;	/* optional element of type xsd:string */
	char *UserOwner;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetODAHostInfoListRequest
#define SOAP_TYPE_ns4__GetODAHostInfoListRequest (50)
/* ns4:GetODAHostInfoListRequest */
struct ns4__GetODAHostInfoListRequest
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns4__GetODAServerInfoListRequest
#define SOAP_TYPE_ns4__GetODAServerInfoListRequest (52)
/* ns4:GetODAServerInfoListRequest */
struct ns4__GetODAServerInfoListRequest
{
	int *ServerType;	/* optional element of type xsd:int */
	int *Status;	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns4__GetProductInfoByIPRequest
#define SOAP_TYPE_ns4__GetProductInfoByIPRequest (54)
/* ns4:GetProductInfoByIPRequest */
struct ns4__GetProductInfoByIPRequest
{
	char *IPList;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetSDKServerInfoListRequest
#define SOAP_TYPE_ns4__GetSDKServerInfoListRequest (56)
/* ns4:GetSDKServerInfoListRequest */
struct ns4__GetSDKServerInfoListRequest
{
	char *NAME;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetSO6InfoServerRequest
#define SOAP_TYPE_ns4__GetSO6InfoServerRequest (58)
/* ns4:GetSO6InfoServerRequest */
struct ns4__GetSO6InfoServerRequest
{
	char *TYPE_USCORESERVER;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetServerNameBySerialNumberRequest
#define SOAP_TYPE_ns4__GetServerNameBySerialNumberRequest (60)
/* ns4:GetServerNameBySerialNumberRequest */
struct ns4__GetServerNameBySerialNumberRequest
{
	char *ServerKey;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetSnSInfoTechnicalOwnerRequest
#define SOAP_TYPE_ns4__GetSnSInfoTechnicalOwnerRequest (62)
/* ns4:GetSnSInfoTechnicalOwnerRequest */
struct ns4__GetSnSInfoTechnicalOwnerRequest
{
	char *Department;	/* optional element of type xsd:string */
	char *NameTechnicalOwner;	/* optional element of type xsd:string */
	char *Product;	/* optional element of type xsd:string */
	char *UserOwner;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__HandleServerVMInfoRequest
#define SOAP_TYPE_ns4__HandleServerVMInfoRequest (64)
/* ns4:HandleServerVMInfoRequest */
struct ns4__HandleServerVMInfoRequest
{
	char *BUCKET;	/* optional element of type xsd:string */
	char *CPU;	/* optional element of type xsd:string */
	char *DELETE;	/* optional element of type xsd:string */
	char *DEPARTMENT;	/* optional element of type xsd:string */
	char *DIVISION;	/* optional element of type xsd:string */
	char *HDD;	/* optional element of type xsd:string */
	char *IPADDRESS;	/* optional element of type xsd:string */
	char *MACADDRESS;	/* optional element of type xsd:string */
	char *MEMORY;	/* optional element of type xsd:string */
	char *NEW_USCOREDEPARTMENT;	/* optional element of type xsd:string */
	char *OS;	/* optional element of type xsd:string */
	char *OS_USCORESERVERNAME;	/* optional element of type xsd:string */
	char *PHYSICALSERVERIP;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORECHASSIS_USCORESN;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORESERVER_USCORESN;	/* optional element of type xsd:string */
	char *PRODUCT;	/* optional element of type xsd:string */
	char *PURPOSE_USCOREUSE;	/* optional element of type xsd:string */
	char *SERVERNAME;	/* optional element of type xsd:string */
	char *STATUS;	/* optional element of type xsd:string */
	char *TECHNICALOWNER;	/* optional element of type xsd:string */
	char *UUID;	/* optional element of type xsd:string */
	char *VLAN;	/* optional element of type xsd:string */
	char *VMCENTER;	/* optional element of type xsd:string */
	char *VMKEY;	/* optional element of type xsd:string */
	char *VMWTOOL;	/* optional element of type xsd:string */
	char *VM_USCOREID;	/* optional element of type xsd:string */
	char *V_USCOREID;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetHostsInfoRequest
#define SOAP_TYPE_ns4__GetHostsInfoRequest (66)
/* ns4:GetHostsInfoRequest */
struct ns4__GetHostsInfoRequest
{
	struct ns4__ArrayOfServerInfo *ServerInfoList;	/* optional element of type ns4:ArrayOfServerInfo */
};
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfServerInfo
#define SOAP_TYPE_ns4__ArrayOfServerInfo (106)
/* ns4:ArrayOfServerInfo */
struct ns4__ArrayOfServerInfo
{
	int __sizeServerInfo;	/* sequence of elements <ServerInfo> */
	struct ns4__ServerInfo *ServerInfo;	/* optional element of type ns4:ServerInfo */
};
#endif

#ifndef SOAP_TYPE_ns4__ServerInfo
#define SOAP_TYPE_ns4__ServerInfo (88)
/* ns4:ServerInfo */
struct ns4__ServerInfo
{
	char *IPAddress;	/* optional element of type xsd:string */
	char *MacAddress;	/* optional element of type xsd:string */
	char *SerialNumber;	/* optional element of type xsd:string */
	char *ServerKey;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__InsertDataServerVMRequest
#define SOAP_TYPE_ns4__InsertDataServerVMRequest (68)
/* ns4:InsertDataServerVMRequest */
struct ns4__InsertDataServerVMRequest
{
	char *BUCKET;	/* optional element of type xsd:string */
	char *CPU;	/* optional element of type xsd:string */
	char *HDD;	/* optional element of type xsd:string */
	char *IPADDRESS;	/* optional element of type xsd:string */
	char *MACADDRESS;	/* optional element of type xsd:string */
	char *MEMORY;	/* optional element of type xsd:string */
	char *OS;	/* optional element of type xsd:string */
	char *OS_USCORESERVERNAME;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORECHASSIS_USCORESN;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORESERVER_USCOREIP;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORESERVER_USCORESN;	/* optional element of type xsd:string */
	char *PRODUCT_USCORECODE;	/* optional element of type xsd:string */
	char *PURPOSE_USCOREUSE;	/* optional element of type xsd:string */
	char *SERVER_USCORENAME;	/* optional element of type xsd:string */
	char *STATUS;	/* optional element of type xsd:string */
	char *TECHNICAL_USCOREOWNER;	/* optional element of type xsd:string */
	char *UUID;	/* optional element of type xsd:string */
	char *VID;	/* optional element of type xsd:string */
	char *VLAN;	/* optional element of type xsd:string */
	char *VMW_USCORETOOL;	/* optional element of type xsd:string */
	char *VM_USCORECENTER;	/* optional element of type xsd:string */
	char *VM_USCOREID;	/* optional element of type xsd:string */
	char *VM_USCOREKEY;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__InsertMeasuredDataRequest
#define SOAP_TYPE_ns4__InsertMeasuredDataRequest (70)
/* ns4:InsertMeasuredDataRequest */
struct ns4__InsertMeasuredDataRequest
{
	unsigned int *Clock;	/* optional element of type xsd:unsignedInt */
	char *Type;	/* optional element of type xsd:string */
	float *Value;	/* optional element of type xsd:float */
};
#endif

#ifndef SOAP_TYPE_ns4__GetItemValueListRequest
#define SOAP_TYPE_ns4__GetItemValueListRequest (72)
/* ns4:GetItemValueListRequest */
struct ns4__GetItemValueListRequest
{
	char *ItemIDList;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__GetHostInfoByIPRequest
#define SOAP_TYPE_ns4__GetHostInfoByIPRequest (74)
/* ns4:GetHostInfoByIPRequest */
struct ns4__GetHostInfoByIPRequest
{
	struct ns5__ArrayOfstring *IPAddressList;	/* optional element of type ns5:ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_ns4__OpenIncidentByCSRequest
#define SOAP_TYPE_ns4__OpenIncidentByCSRequest (76)
/* ns4:OpenIncidentByCSRequest */
struct ns4__OpenIncidentByCSRequest
{
	struct ns5__ArrayOfstring *Attachment;	/* optional element of type ns5:ArrayOfstring */
	unsigned int *CaseCount;	/* optional element of type xsd:unsignedInt */
	char *Description;	/* optional element of type xsd:string */
	char *IncidentCode;	/* optional element of type xsd:string */
	char *Product;	/* optional element of type xsd:string */
	char *Server;	/* optional element of type xsd:string */
	char *Title;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__OpenIncidentByDCRequest
#define SOAP_TYPE_ns4__OpenIncidentByDCRequest (78)
/* ns4:OpenIncidentByDCRequest */
struct ns4__OpenIncidentByDCRequest
{
	char *Description;	/* optional element of type xsd:string */
	char *DeviceName;	/* optional element of type xsd:string */
	char *HostService;	/* optional element of type xsd:string */
	char *ISPPath;	/* optional element of type xsd:string */
	char *Location;	/* optional element of type xsd:string */
	char *Status;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__OpenIncidentByG8Request
#define SOAP_TYPE_ns4__OpenIncidentByG8Request (80)
/* ns4:OpenIncidentByG8Request */
struct ns4__OpenIncidentByG8Request
{
	enum ns4__G8Action *Action;	/* optional element of type ns4:G8Action */
	char *AffectedDeals;	/* optional element of type xsd:string */
	char *AttachmentList;	/* optional element of type xsd:string */
	char *CCList;	/* optional element of type xsd:string */
	char *CurrentStatus;	/* optional element of type xsd:string */
	char *Description;	/* optional element of type xsd:string */
	int *ImpactedCustomerCount;	/* optional element of type xsd:int */
	char *IncidentCode;	/* optional element of type xsd:string */
	unsigned int *OutageStart;	/* optional element of type xsd:unsignedInt */
	char *ProductAlias;	/* optional element of type xsd:string */
	char *Title;	/* optional element of type xsd:string */
	char *ToList;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__RemoveDataServerVMRequest
#define SOAP_TYPE_ns4__RemoveDataServerVMRequest (82)
/* ns4:RemoveDataServerVMRequest */
struct ns4__RemoveDataServerVMRequest
{
	char *VID;	/* optional element of type xsd:string */
	char *VM_USCOREKEY;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__UpdateDataServerVMRequest
#define SOAP_TYPE_ns4__UpdateDataServerVMRequest (92)
/* ns4:UpdateDataServerVMRequest */
struct ns4__UpdateDataServerVMRequest
{
	char *BUCKET;	/* optional element of type xsd:string */
	char *CPU;	/* optional element of type xsd:string */
	char *HDD;	/* optional element of type xsd:string */
	char *IPADDRESS;	/* optional element of type xsd:string */
	char *MACADDRESS;	/* optional element of type xsd:string */
	char *MEMORY;	/* optional element of type xsd:string */
	char *OS;	/* optional element of type xsd:string */
	char *OS_USCORESERVERNAME;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORECHASSIS_USCORESN;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORESERVER_USCOREIP;	/* optional element of type xsd:string */
	char *PHYSICAL_USCORESERVER_USCORESN;	/* optional element of type xsd:string */
	char *PRODUCT_USCORECODE;	/* optional element of type xsd:string */
	char *PURPOSE_USCOREUSE;	/* optional element of type xsd:string */
	char *SERVER_USCORENAME;	/* optional element of type xsd:string */
	char *STATUS;	/* optional element of type xsd:string */
	char *TECHNICAL_USCOREOWNER;	/* optional element of type xsd:string */
	char *UUID;	/* optional element of type xsd:string */
	char *VID;	/* optional element of type xsd:string */
	char *VLAN;	/* optional element of type xsd:string */
	char *VMW_USCORETOOL;	/* optional element of type xsd:string */
	char *VM_USCORECENTER;	/* optional element of type xsd:string */
	char *VM_USCOREID;	/* optional element of type xsd:string */
	char *VM_USCOREKEY;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__UpdateInfoRequest
#define SOAP_TYPE_ns4__UpdateInfoRequest (94)
/* ns4:UpdateInfoRequest */
struct ns4__UpdateInfoRequest
{
	enum ns4__UpdateCategory *Category;	/* optional element of type ns4:UpdateCategory */
	struct ns4__FieldPair *PrimaryField;	/* optional element of type ns4:FieldPair */
	struct ns4__ArrayOfFieldPair *UpdatedFieldList;	/* optional element of type ns4:ArrayOfFieldPair */
};
#endif

#ifndef SOAP_TYPE_ns4__FieldPair
#define SOAP_TYPE_ns4__FieldPair (114)
/* ns4:FieldPair */
struct ns4__FieldPair
{
	enum ns4__FieldCode *Code;	/* optional element of type ns4:FieldCode */
	char *Value;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfFieldPair
#define SOAP_TYPE_ns4__ArrayOfFieldPair (116)
/* ns4:ArrayOfFieldPair */
struct ns4__ArrayOfFieldPair
{
	int __sizeFieldPair;	/* sequence of elements <FieldPair> */
	struct ns4__FieldPair *FieldPair;	/* optional element of type ns4:FieldPair */
};
#endif

#ifndef SOAP_TYPE_ns4__UpdateServerStatusRequest
#define SOAP_TYPE_ns4__UpdateServerStatusRequest (96)
/* ns4:UpdateServerStatusRequest */
struct ns4__UpdateServerStatusRequest
{
	struct ns4__ArrayOfServerStatusInfo *ServerStatusList;	/* optional element of type ns4:ArrayOfServerStatusInfo */
};
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfServerStatusInfo
#define SOAP_TYPE_ns4__ArrayOfServerStatusInfo (119)
/* ns4:ArrayOfServerStatusInfo */
struct ns4__ArrayOfServerStatusInfo
{
	int __sizeServerStatusInfo;	/* sequence of elements <ServerStatusInfo> */
	struct ns4__ServerStatusInfo *ServerStatusInfo;	/* optional element of type ns4:ServerStatusInfo */
};
#endif

#ifndef SOAP_TYPE_ns4__ServerStatusInfo
#define SOAP_TYPE_ns4__ServerStatusInfo (121)
/* ns4:ServerStatusInfo */
struct ns4__ServerStatusInfo
{
	char *ServerKey;	/* optional element of type xsd:string */
	char *ServerStatus;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__HandleServerPhysicalInfoRequest
#define SOAP_TYPE_ns4__HandleServerPhysicalInfoRequest (90)
/* ns4:HandleServerPhysicalInfoRequest */
struct ns4__HandleServerPhysicalInfoRequest
{
	char *ASSET_USCORECODE;	/* optional element of type xsd:string */
	char *BAY;	/* optional element of type xsd:string */
	char *BUCKET;	/* optional element of type xsd:string */
	char *CPU;	/* optional element of type xsd:string */
	char *HDD_USCORESIZE;	/* optional element of type xsd:string */
	char *IP_USCORECHASSIS;	/* optional element of type xsd:string */
	char *IP_USCORECONSOLE;	/* optional element of type xsd:string */
	char *OS_USCOREHDD_USCORERAID_USCORETYPE;	/* optional element of type xsd:string */
	char *PRODUCT_USCORECODE;	/* optional element of type xsd:string */
	char *RACK;	/* optional element of type xsd:string */
	char *RAM;	/* optional element of type xsd:string */
	char *SERIAL_USCORENUMBER;	/* optional element of type xsd:string */
	char *SERVER_USCOREMODEL;	/* optional element of type xsd:string */
	char *SITE;	/* optional element of type xsd:string */
	char *STATUS;	/* optional element of type xsd:string */
	char *TOTAL_USCOREMEMORY;	/* optional element of type xsd:string */
	char *TYPE_USCORECHANGE;	/* optional element of type xsd:string */
	char *U;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__SDKUpdateIpMacRequest
#define SOAP_TYPE_ns4__SDKUpdateIpMacRequest (86)
/* ns4:SDKUpdateIpMacRequest */
struct ns4__SDKUpdateIpMacRequest
{
	struct ns4__ArrayOfInterfaceAddress *IP_USCOREPrivate;	/* optional element of type ns4:ArrayOfInterfaceAddress */
	struct ns4__ArrayOfInterfaceAddress *IP_USCOREPublic;	/* optional element of type ns4:ArrayOfInterfaceAddress */
	char *OS_USCOREVersion;	/* optional element of type xsd:string */
	char *SW_USCOREList;	/* optional element of type xsd:string */
	char *Serial_USCORENumber;	/* optional element of type xsd:string */
	char *Server_USCOREName;	/* optional element of type xsd:string */
	char *Zbx_USCORELast_USCOREClock;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns4__SDKResponse
#define SOAP_TYPE_ns4__SDKResponse (30)
/* ns4:SDKResponse */
struct ns4__SDKResponse
{
	char *ResponseData;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfstring
#define SOAP_TYPE_ns5__ArrayOfstring (110)
/* ns5:ArrayOfstring */
struct ns5__ArrayOfstring
{
	int __sizestring;	/* sequence of elements <string> */
	char **string;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfbase64Binary
#define SOAP_TYPE_ns5__ArrayOfbase64Binary (124)
/* ns5:ArrayOfbase64Binary */
struct ns5__ArrayOfbase64Binary
{
	int __sizebase64Binary;	/* sequence of elements <base64Binary> */
	struct xsd__base64Binary *base64Binary;	/* optional element of type xsd:base64Binary */
};
#endif

#ifndef SOAP_TYPE_ns4__SDKPostRequest
#define SOAP_TYPE_ns4__SDKPostRequest (84)
/* ns4:SDKPostRequest */
struct ns4__SDKPostRequest
{
	char *Checksum;	/* optional element of type xsd:string */
	char *ClientId;	/* optional element of type xsd:string */
	enum ns4__DataFormatEnum *DataFormat;	/* optional element of type ns4:DataFormatEnum */
	struct ns4__GetGSOCCURequest *GetHostInfoRequest;	/* optional element of type ns4:GetGSOCCURequest */
	char *Operation;	/* optional element of type xsd:string */
	char *RequestData;	/* optional element of type xsd:string */
	unsigned int *RequestTime;	/* optional element of type xsd:unsignedInt */
	char *Signature;	/* optional element of type xsd:string */
	struct ns4__CMDBV2_USCOREGetServerDetailRequest *theCMDBV2_USCOREGetServerDetailRequest;	/* optional element of type ns4:CMDBV2_GetServerDetailRequest */
	struct ns4__CMDBV2_USCOREHandleServerVMInfoRequest *theCMDBV2_USCOREHandleServerVMInfoRequest;	/* optional element of type ns4:CMDBV2_HandleServerVMInfoRequest */
	struct ns4__CMDBv2_USCORESDKUpdateIpMacRequest *theCMDBV2_USCORESDKUpdateIpMacRequest;	/* optional element of type ns4:CMDBv2_SDKUpdateIpMacRequest */
	struct ns4__GetCCUByProductCodeRequest *theGetCCUByProductCodeRequest;	/* optional element of type ns4:GetCCUByProductCodeRequest */
	struct ns4__GetIRDServerVMInfoRequest *theGetIRDServerVMInfoRequest;	/* optional element of type ns4:GetIRDServerVMInfoRequest */
	struct ns4__GetIRDTechnicalOwnerInfoRequest *theGetIRDTechnicalOwnerInfoRequest;	/* optional element of type ns4:GetIRDTechnicalOwnerInfoRequest */
	struct ns4__GetListAllServerRequest *theGetListAllServerRequest;	/* optional element of type ns4:GetListAllServerRequest */
	struct ns4__GetODAHostInfoListRequest *theGetODAHostInfoListRequest;	/* optional element of type ns4:GetODAHostInfoListRequest */
	struct ns4__GetODAServerInfoListRequest *theGetODAServerInfoListRequest;	/* optional element of type ns4:GetODAServerInfoListRequest */
	struct ns4__GetProductInfoByIPRequest *theGetProductInfoByIPRequest;	/* optional element of type ns4:GetProductInfoByIPRequest */
	struct ns4__GetSDKServerInfoListRequest *theGetSDKServerInfoListRequest;	/* optional element of type ns4:GetSDKServerInfoListRequest */
	struct ns4__GetSO6InfoServerRequest *theGetSO6InfoServerRequest;	/* optional element of type ns4:GetSO6InfoServerRequest */
	struct ns4__GetServerNameBySerialNumberRequest *theGetServerNameBySerialRequest;	/* optional element of type ns4:GetServerNameBySerialNumberRequest */
	struct ns4__GetSnSInfoTechnicalOwnerRequest *theGetSnSInfoTechnicalOwnerRequest;	/* optional element of type ns4:GetSnSInfoTechnicalOwnerRequest */
	struct ns4__HandleServerVMInfoRequest *theHandleServerVMInfoRequest;	/* optional element of type ns4:HandleServerVMInfoRequest */
	struct ns4__GetHostsInfoRequest *theHostInfoRequest;	/* optional element of type ns4:GetHostsInfoRequest */
	struct ns4__InsertDataServerVMRequest *theInsertDataServerVMRequest;	/* optional element of type ns4:InsertDataServerVMRequest */
	struct ns4__InsertMeasuredDataRequest *theInsertMeasuredDataRequest;	/* optional element of type ns4:InsertMeasuredDataRequest */
	struct ns4__GetItemValueListRequest *theItemValueRequest;	/* optional element of type ns4:GetItemValueListRequest */
	struct ns4__GetHostInfoByIPRequest *theMacAddressRequest;	/* optional element of type ns4:GetHostInfoByIPRequest */
	struct ns4__OpenIncidentByCSRequest *theOpenIncidentByCSRequest;	/* optional element of type ns4:OpenIncidentByCSRequest */
	struct ns4__OpenIncidentByDCRequest *theOpenIncidentByDCRequest;	/* optional element of type ns4:OpenIncidentByDCRequest */
	struct ns4__OpenIncidentByG8Request *theOpenIncidentByG8Request;	/* optional element of type ns4:OpenIncidentByG8Request */
	struct ns4__RemoveDataServerVMRequest *theRemoveDataServerVMRequest;	/* optional element of type ns4:RemoveDataServerVMRequest */
	struct ns4__SDKPostRequest *theSDKPostRequest;	/* optional element of type ns4:SDKPostRequest */
	struct ns4__SDKUpdateIpMacRequest *theSDKUpdateIpMacRequest;	/* optional element of type ns4:SDKUpdateIpMacRequest */
	struct ns4__ServerInfo *theServerInfo;	/* optional element of type ns4:ServerInfo */
	struct ns4__HandleServerPhysicalInfoRequest *theUpdateDataServerPhysicalRequest;	/* optional element of type ns4:HandleServerPhysicalInfoRequest */
	struct ns4__UpdateDataServerVMRequest *theUpdateDataServerVMRequest;	/* optional element of type ns4:UpdateDataServerVMRequest */
	struct ns4__UpdateInfoRequest *theUpdateInfoRequest;	/* optional element of type ns4:UpdateInfoRequest */
	struct ns4__UpdateServerStatusRequest *theUpdateServerStatusRequest;	/* optional element of type ns4:UpdateServerStatusRequest */
	struct ns5__ArrayOfbase64Binary *PostData;	/* optional element of type ns5:ArrayOfbase64Binary */
};
#endif

#ifndef SOAP_TYPE___ns1__Call
#define SOAP_TYPE___ns1__Call (130)
/* Operation wrapper: */
struct __ns1__Call
{
	struct _ns1__Call *ns1__Call;	/* optional element of type ns1:Call */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (131)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (132)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (134)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (137)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (138)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (12)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (13)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (14)
typedef char *xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (15)
typedef char *xsd__IDREF;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (16)
typedef char *xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (17)
typedef char *xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (18)
typedef char *xsd__duration;
#endif

#ifndef SOAP_TYPE_ns3__char
#define SOAP_TYPE_ns3__char (19)
typedef int ns3__char;
#endif

#ifndef SOAP_TYPE_ns3__duration
#define SOAP_TYPE_ns3__duration (20)
typedef char *ns3__duration;
#endif

#ifndef SOAP_TYPE_ns3__guid
#define SOAP_TYPE_ns3__guid (21)
typedef char *ns3__guid;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__Call(struct soap*, struct _ns1__Call *ns1__Call, struct _ns1__CallResponse *ns1__CallResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Call(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Call(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct _ns1__Call *ns1__Call, struct _ns1__CallResponse *ns1__CallResponse);

#ifdef __cplusplus
}
#endif

#endif

/* End of soapStub.h */
